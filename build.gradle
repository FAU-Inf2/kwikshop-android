// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {

        //IMPORTANT: If you add dependencies here, you also need to mention
        // the dependency in README.md. If you want it to show up in the application's about screen
        // you also need to add it to the string array acknowledgements_Items in values/strings.xml

        classpath 'com.android.tools.build:gradle:1.1.0'
        classpath 'org.ajoberstar:gradle-git:1.1.0'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files

    }
}

apply plugin: 'license'

import org.ajoberstar.grgit.*

def isTravisBuild() {
    def tarvisVar = System.getenv('TRAVIS') ?: 'false'
    return tarvisVar.compareToIgnoreCase('true') == 0
}

def getGitRepository() {
    def repo = Grgit.open(dir: project.getRootProject().file('.'))
    return repo
}

def getGitCommitId() {

    if(isTravisBuild()) {
        return System.getenv('TRAVIS_COMMIT') ?: 'Unknown'
    } else {
        def repo = getGitRepository()
        def commitId = repo.head().getAbbreviatedId(10)
        if(!repo.status().isClean()) {
            commitId += "+"
        }
        return commitId
    }
}

def getGitBranchName() {
    if(isTravisBuild()) {

        def prVar = System.getenv('TRAVIS_PULL_REQUEST') ?: 'false';

        if(prVar.compareToIgnoreCase('false') == 0) {
            return System.getenv('TRAVIS_BRANCH') ?: 'Unknown'
        } else {
            return 'Pull-Request ' + prVar + ' for Branch ' + System.getenv('TRAVIS_BRANCH') ?: ''
        }
    } else {
        def repo = getGitRepository()
        return repo.branch.getCurrent().getName()
    }
}

allprojects {
    repositories {
        jcenter()
    }

    // writes info from git to build/info.txt for each project
    task writeBuildInfoFile() << {

        def buildInfoFile = project.file("build/info.txt")

        def buildInfo = "Commit: "
        buildInfo <<= getGitCommitId()
        buildInfo <<= "\n"

        buildInfo <<= "Branch: "
        buildInfo <<= getGitBranchName()
        buildInfo <<= "\n"

        buildInfoFile.text = buildInfo
    }

}

license {
    header = file('license.txt')
}
