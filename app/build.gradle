
// Imports, mainly used for jaxrs2retrofit
import com.wordnik.swagger.annotations.ApiParam
import com.squareup.javapoet.ClassName;
import de.bitdroid.jaxrs2retrofit.converter.IgnoreConverter;
import de.bitdroid.jaxrs2retrofit.converter.ParamConverter;
import de.bitdroid.jaxrs2retrofit.converter.AnnotatedParam;
import io.dropwizard.auth.Auth;
import retrofit.http.Body;

apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'de.bitdroid.jaxrs2retrofit'

//definition of sources directories
// application souces
def appSourcesDir = file('src/main/java')
// sources of kwikshop-common
def commonSourcesDir = rootProject.file('../kwikshop-common/src/main/java')
// output directory of jaxrs2retrofit
def generatedSourcesDir = file('src/main/java-gen')


buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        //as with the imports, dependencies necessary for jaxrs2retrofit
        classpath 'com.wordnik:swagger-annotations:1.5.0-M2'
        classpath 'com.squareup:javapoet:1.2.0'
        classpath 'com.squareup.retrofit:retrofit:1.9.0'
        classpath 'de.bitdroid.jaxrs2retrofit:plugin:0.4.1'
        classpath 'io.dropwizard:dropwizard-auth:0.8.1'
    }
}

android {
    compileSdkVersion 21
    buildToolsVersion '21.1.2'

    sourceSets {
        main.java.srcDirs += 'src/common/src/main/java'
    }

    defaultConfig {
        applicationId "de.fau.cs.mad.kwikshop.android"
        multiDexEnabled true
        versionCode 2
        versionName "1.0.1"

        //resources generated during build
        resValue "string", "BuildInfo_Git_Branch", getGitBranchName()
        resValue "string", "BuildInfo_Git_Commit", getGitCommitId()
		resValue "string", "BuildInfo_Version", versionName
		resValue "string", "BuildInfo_CommonRepository_Git_Commit", getGitCommitIdForCommonRepository()
    }

    signingConfigs {
        release {
            storeFile file("unknown")
            storePassword "unknown"
            keyAlias "unknown"
            keyPassword "unknown"
        }
    }

    productFlavors {
        // Define separate dev and prod product flavors.
        dev {
            // dev utilizes minSDKVersion = 21 to allow the Android gradle plugin
            // to pre-dex each module and produce an APK that can be tested on
            // Android Lollipop without time consuming dex merging processes.
            minSdkVersion 21
        }
        prod {
            // The actual minSdkVersion for the application.
            minSdkVersion 14
        }
    }


    buildTypes {
        release {
            multiDexEnabled true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    sourceSets {
        main {
            java {
                srcDir appSourcesDir
                srcDir generatedSourcesDir
                srcDir commonSourcesDir
            }
        }
    }


    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/eclipse.inf'
        exclude 'license.html'
        exclude 'readme.html'
        exclude 'META-INF/services/org.glassfish.jersey.internal.spi.ForcedAutoDiscoverable'
    }


    dexOptions {
        javaMaxHeapSize "4g"
    }
}


//also build kwikshop-common (this can probably be removed)
preBuild.dependsOn(":../kwikshop-common:build")

dependencies {
    //IMPORTANT: If you add dependencies here, you also need to mention
    // the dependency in README.md. If you want it to show up in the application's about screen
    // you also need to add it to the string array acknowledgements_Items in values/strings.xml

    compile fileTree(dir: 'libs', include: ['*.jar'])

    //compile files('../../kwikshop-common/build/libs/kwikshop-common-1.0.jar')
    //Google support libraries for older android version
    compile 'com.android.support:appcompat-v7:21.0.+'
    compile 'com.android.support:multidex:1.0.0'

    //orm-lite (Object mapper)
    compile 'com.j256.ormlite:ormlite-android:4.48'

    //Floating action button common in material design applications
    compile 'com.melnykov:floatingactionbutton:1.3.0'

    //event bus for publish-subscribe messaging
    compile 'de.greenrobot:eventbus:2.4.0'

    //Animations, drag and drop, swiping for ListView
    compile 'com.nhaarman.listviewanimations:lib-core:3.1.0@aar'
    compile 'com.nhaarman.listviewanimations:lib-manipulation:3.1.0@aar'
    compile 'com.nhaarman.listviewanimations:lib-core-slh:3.1.0@aar'

    //Dependency injection
    compile 'com.squareup.dagger:dagger:1.2.2'
    provided 'com.squareup.dagger:dagger-compiler:1.2.2'
    compile 'com.jakewharton:butterknife:6.1.0'

    //Google Play Services
    compile 'com.google.android.gms:play-services-location:7.5.0'
    compile 'com.google.android.gms:play-services-maps:7.5.0'

    //Google Places API
    compile 'se.walkercrou:google-places-api-java:2.1.2'
    compile 'org.apache.httpcomponents:httpclient-android:4.3.5.1'

    //Google Maps Utils
    compile 'com.google.maps.android:android-maps-utils:0.3+'

    //Google Play Services for Login
    compile 'com.google.android.gms:play-services-base:7.5.0'
    compile 'com.google.android.gms:play-services-plus:7.5.0'

    //REST
    compile 'javax.ws.rs:javax.ws.rs-api:2.0.1'
    compile('org.glassfish.jersey.core:jersey-client:2.17') {
        exclude module: 'javax.inject'
    }
    compile('org.glassfish.jersey.ext:jersey-proxy-client:2.17') {
        exclude module: 'javax.inject'
    }
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.5.1'
    compile 'javax.inject:javax.inject:1'
    compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.5.1'
    compile 'com.wordnik:swagger-annotations:1.5.0-M2'
    compile 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final'

    // REST - Retrofit
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.4.0'
    compile 'com.squareup.okhttp:okhttp:2.4.0'

    //Joda Time
    compile 'joda-time:joda-time:2.8.1'
}

allprojects {
    afterEvaluate { project ->
        def propsFile = rootProject.file('keystore.properties')
        def configName = 'release'

        if (propsFile.exists() && android.signingConfigs.hasProperty(configName)) {
            def props = new Properties()
            props.load(new FileInputStream(propsFile))
            android.signingConfigs[configName].storeFile = file(props['storeFile'])
            android.signingConfigs[configName].storePassword = props['storePassword']
            android.signingConfigs[configName].keyAlias = props['keyAlias']
            android.signingConfigs[configName].keyPassword = props['keyPassword']
        }
    }
}

//jaxrs2retrofit task definition
afterEvaluate {
    project.tasks.matching { it.name.startsWith('jaxRs2Retrofit') }.each {

        it.dependsOn('deleteGeneratedSources')

        //input directory is the main source set of kwikshop-common
        it.inputDir = file(project(':../kwikshop-common').projectDir.toString() + '/src/main/java')
        //output to source set of app
        it.outputDir = generatedSourcesDir
        it.packageName = 'de.fau.cs.mad.kwikshop.android.restclient'

        //do not generate client interface for UserResource
        it.excludedClassNamesRegex = "UserResource"

        //generate synchronous methods on√∂y
        it.generateSynchronousMethods = true
        it.generateCallbackMethods = false
        it.generateRxJavaMethods = false

        //customize handling for certain annotation

        //ignore all parameters marked with dropwizard's @Auth attribute
        it.paramConverterManager.registerConverter(ClassName.get(Auth.class), new IgnoreConverter());

        //parameters marked with @ApiParam (swagger): map to @Body, but remove annotation parameters
        it.paramConverterManager.registerConverter(ClassName.get(ApiParam.class),
                new ParamConverter() {
                    @Override
                    AnnotatedParam convert(AnnotatedParam param) {
                        return new AnnotatedParam(
                                param.getParamType(),
                                ClassName.get(Body.class),
                                new HashMap<String, Object>());
                    }
                });

    }
}

// when running the tasks clean or build, delete the source files generated by jaxrs2retrofit
// so interfaces get created for every build (jaxrs2retrofit seems to skip files which already 
// exist, even if the input for code generation has changed)
task(deleteGeneratedSources) << {    
    if(generatedSourcesDir.exists()) {
        def result = generatedSourcesDir.deleteDir()  
        assert result : "Could not delete generated sources directory (java-gen)"
    }       
}

clean.dependsOn('deleteGeneratedSources')